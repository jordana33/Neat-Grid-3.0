<div class="demo">
	<ul>
		<li>
			Many of the classes in these examples are named non-semantically (e.g. .grid-container, .extra-wide) However, Thoughtbot's frameworks use mixins instead of classes deliberately to help avoid this.  Using mixins gives us the opportunity to use more semantic names for our classes (e.g. .search-filters, .date-filter).
		</li>
	</ul>

	<section class="default-grid-1">
		<h1>Default Grid</h1>
		<div class="grid-container">
			<p> cell 1</p>
			<p> cell 2</p>
			<p> cell 3</p>
			<p> cell 4</p>
			<p> cell 5</p>
			<p> cell 6</p>
			<p> cell 7</p>
		</div>
	</section>
	<ul>
		<li>
			We could put the paragraph tags directly under the H1 and it would work 98% of the timep.  However, it is a good idea to have all of the children of a grid container be a grid element.  This wasn't needed in Neat 1 and you will see places in Guide where it isn't currently true.
		</li>
	</ul>

	<section class="default-grid-2">
		<h1>Default Grid - varying column span settings</h1>
		<div class="grid-container">
			<p> cell 1</p>
			<p class="wide"> cell 2 </p>
			<p> cell 3</p>
			<p class="wide"> cell 4</p>
			<p> cell 5</p>
			<p class="wide"> cell 6</p>
			<p> cell 7</p>
			<p> cell 8</p>
			<p class="wide"> cell 9</p>
			<p class="extra-wide"> cell 10</p>
		</div>
	</section>
	<ul>
		<li>
			Note that there are no rows defined here.  These paragraph tags are floated and the default behavior for float is that it will wrap to the next line if it can't fit.  We do define rows sometimes with our grid layouts when we don't need to.  They should only be added if we are intentionally seperating elements into rows for design purposes.
		</li>
	</ul>

		<section class="grid-shift">
		<h1>Grid Shift</h1>
		<div class="grid-container">
			<p class="cell-1"> cell 1</p>
			<p class="cell-2"> cell 2 </p>
			<p class="cell-3"> cell 3</p>
			<p class="cell-4"> cell 4</p>
			<p class="cell-5"> cell <em>5</em></p>
			<p class="cell-6"> cell <em>6</em></p>
			<p class="cell-7"> cell 7</p>
			<p class="cell-8"> cell 8</p>
			<p class="cell-9"> cell 9</p>
			<p class="cell-10"> cell 10</p>
		</div>
	</section>
	<ul>
		<li>
			Grid-shift uses relative positioning to move items around in the grid.  Cell 3 has been shifted 1 and is overlapping Cell 4.  Cell 5 has been shifted 2 and Cell 6 has been shifted -2.  They are in number order in the HTML but there position in the grid has been manipulated with CSS.
		</li>
	</ul>

	<section class="grid-push">
		<h1>Grid Push</h1>
		<div class="grid-container">
			<p class="cell-1"> cell 1</p>
			<p class="cell-2"> cell 2 </p>
			<p class="cell-3"> cell 3</p>
			<p class="cell-4"> cell 4</p>
			<p class="cell-5"> cell 5</p>
			<p class="cell-6"> cell 6</p>
			<p class="cell-7"> cell 7</p>
			<p class="cell-8"> cell 8</p>
			<p class="cell-9"> cell 9</p>
			<p class="cell-10"> cell 10</p>
		</div>
	</section>
	<ul>
		<li>
			Grid push adds extra margin in order to push a column in one direction or another.  It is useful for adding negative space in a grid.
		</li>
	</ul>

	<section class="grid-nested">
		<h1>Nesting Grids</h1>
		<div class="grid-container">
			<div class="cell-1"> cell 1</div>
			<div class="cell-2"> cell 2</div>
			<div class="cell-3"> cell 3</div>
			<div class="cell-4">
				<div class="grid-collapse">
					<p class="nested-cell-1">
						nested 1
					</p>
					<p class="nested-cell-2">
						nested 2
					</p>
				</div>
			</div>
			<div class="cell-5"> cell 5</div>
			<div class="cell-6"> cell 6</div>
		</div>
	</section>
	<ul>
		<li>
			Grids can be nested within grids!
		</li>
	</ul>

	<section class="custom-grid">
		<h1>Adding a Custom Grid</h1>
		<div class="grid-container">
			<div class="cell-1"> cell 1</div>
			<div class="cell-2"> cell 2</div>
			<div class="cell-3"> cell 3</div>
			<div class="cell-4">
				<div class="custom-collapse">
					<p class="nested-cell-1">
						nested 1
					</p>
					<p class="nested-cell-2">
						nested 2
					</p>
				</div>
			</div>
			<div class="cell-5"> cell 5</div>
			<div class="cell-6"> cell 6</div>
		</div>
	</section>
	<ul>
		<li>
			In the previous example There is a lot of space between the half columns. What If I don't want 12 column grid with a 20px margin for that nested grid?  This example uses a custom grid definition for the nested grid.
		</li>
	</ul>

	<section class="media-query-1">
		<h1>Media Query</h1>
		<div class="grid-container">
			<p> cell 1</p>
			<p> cell 2</p>
			<p> cell 3</p>
			<p> cell 4</p>
			<p> cell 5</p>
			<p> cell 6</p>
			<p> cell 7</p>
		</div>
	</section>
	<ul>
		<li>
			We can use regular media queries to change the number of columns content inhabits at different breakpoints.  (We do this extensively now.)
		</li>
	</ul>

	<section class="media-query-2">
		<h1>Media Query with grid-media mixin</h1>
		<div class="grid-container">
			<p> cell 1</p>
			<p> cell 2</p>
			<p> cell 3</p>
			<p> cell 4</p>
			<p> cell 5</p>
			<p> cell 6</p>
			<p> cell 7</p>
		</div>
	</section>
	<ul>
		<li>
			If we want to use a different base grid at phone / tablet size the media-grid mixin is available.  Define a custom grid for with a media attribute and pass it into the media-grid mixin.
		</li>
	</ul>

	<section class="play-area-1">
		<h1>Play Area 1</h1>
		<div class="grid-container">
			<p class="cell-1"> cell 1</p>
			<p class="cell-2"> cell 2</p>
			<p class="cell-3"> cell 3</p>
			<p class="cell-4"> cell 4</p>
			<p class="cell-5"> cell 5</p>
			<p class="cell-6"> cell 6</p>
			<p class="cell-7"> cell 7</p>
			<p class="cell-8"> cell 8</p>
			<p class="cell-9"> cell 9</p>
			<p class="cell-10"> cell 10</p>
		</div>
	</section>

	<section class="play-area-2">
		<h1>Play Area 2</h1>
		<div class="grid-container">
			<p class="cell-1"> cell 1</p>
			<p class="cell-2"> cell 2</p>
			<p class="cell-3"> cell 3</p>
			<p class="cell-4"> cell 4</p>
			<p class="cell-5"> cell 5</p>
			<p class="cell-6"> cell 6</p>
			<p class="cell-7"> cell 7</p>
			<p class="cell-8"> cell 8</p>
			<p class="cell-9"> cell 9</p>
			<p class="cell-10"> cell 10</p>
		</div>
	</section>
</div>




